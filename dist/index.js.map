{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/*\n\tSlack bot for team #ghostbusters on Habitica!\n*/\n\nimport { default as Slack } from 'slack-client';\nimport { map, filter } from 'lodash/collection';\nimport { has } from 'lodash/object';\nimport { readFileSync } from 'fs';\nimport * as commands from './commands';\n\n\n// import api token\nconst token = process.env.SLACK_HABITICA_BOT_TOKEN || readFileSync('apiToken', { encoding: 'utf8' });\nconst autoReconnect = true;\nconst autoMark = true;\n\nconst slack = new Slack(token, autoReconnect, autoMark);\n\nfunction isCommand(string) {\n\treturn has(commands, string);\n}\n\nfunction runCommand(command, ...args) {\n\treturn commands[command](...args);\n} \n\nfunction parseCommand(channel, user, text) {\n\tconst [command, ...args] = text.split(' ');\n\tif (isCommand(command)) {\n\t\trunCommand(command, channel, user, ...args);\n\t} else {\n\t\tconsole.log(\"not a command\", command);\n\t}\n}\n\nfunction currentChannels(channels) {\n\treturn map(\n\t\tfilter(channels, (channel, key) => channel.is_member),\n\t\t(channel, key) => channel.name\n\t);\n}\n\nfunction currentGroups(groups) {\n\treturn map(\n\t\tfilter(groups, () => group.is_open && !group.is_archived),\n\t\t(group, key) => group.name\n\t);\n}\n\nfunction isDirect(id, text) {\n\tconst tag = `<@${id}>`;\n\treturn text && text.substr(0, tag.length) === tag;\n}\n\nfunction isDM(message) {\n\treturn message && message.channel[0] == \"D\";\n}\n\nfunction stripTag(id, text) {\n\tconst tag = `<@${id}>: `;\n\treturn text.substr(tag.length);\n}\n\nslack.on('open', () => {\n\tconst channels = currentChannels(slack.channels);\n\tconst groups = currentGroups(slack.groups);\n\tconst unreads = slack.getUnreadCount();\n\n\tconsole.log(`In channels: ${channels.join(', ')}`);\n\tconsole.log(`In groups: ${groups.join(', ')}`);\n\tconsole.log(`Unread messages: ${unreads}`);\n});\n\nslack.on('message', (message) => {\n\tconst channel = slack.getChannelGroupOrDMByID(message.channel);\n\tconst user = slack.getUserByID(message.user);\n\tconst {type, ts, text} = message;\n\n\tif (isDirect(slack.self.id, text)) {\n\t\tconst userName = has(user, 'name') ? user.name : 'UKNNOWN_USER';\n\t\tconst channelName = channel ? channel.name : 'UKNOWN_CHANNEL';\n\t\tconst msg = stripTag(slack.self.id, text);\n\n\t\tconsole.log(`[${type}:#${channelName}] ${userName} ${ts}> ${msg}`);\n\n\t\tparseCommand(channel, user, msg);\n\t} else {\n\t\tif(isDM(message)) {\n\t\t\tconsole.log(\"new DM from \", user.name);\n\t\t\tconsole.log(\"dm channel:\", channel.id);\n\t\t\tconsole.log(text);\n\n\t\t\tconsole.log(`[DM:@${user.name}] ${ts}> ${text}`);\n\n\t\t\tparseCommand(channel, user, text);\n\t\t\t// now we need to break the message down into commands and route properly\n\t\t}\n\t}\n});\n\nslack.on('error', (err) => console.error(err));\n\n// let's go\nslack.login();\n\nvar responses = [\n\t\"Huh?  What?  I'm totally awake...\",\n\t\"FUCKING WHAT?!\",\n\t\"I live to serve.\",\n\t\"Moar work?\",\n\t\"Assphinctersayswhat?\",\n\t\"I am here.\",\n\t\"There's always money in the banana stand...\"\n];\n\nrequire(\"http\").createServer(function(req, res) {\n\tconsole.log(\"Wake-up call.\");\n\tres.writeHead(200,{\"Content-Type\": \"application/json\"});\n    res.end(JSON.stringify({ response_type: \"in_channel\", text: responses[Math.floor(Math.random()*responses.length)] }));\n}).listen(process.env.PORT || 5000);\n"]}